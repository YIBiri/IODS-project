4 + 9 + 9 + 5 + 2 + 1
str(test)
30/102
data(Boston)
summary(Boston)
?data()
data(Boston)
summary(Boston)
data('Boston')
scale('Boston')
data('Boston')
scale(Boston)
data('Boston')
scale(Boston)
# euclidean distance matrix
dist_eu <- dist(Boston)
print("Euclidean distance")
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(Boston, method = "manhattan")
print("Manhattan distance")
# look at the summary of the distances"
summary(dist_man)
# euclidean distance matrix
dist_eu <- dist(Boston)
print("Euclidean distance")
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(boston_scaled, method = "manhattan")
print("Manhattan distance")
# look at the summary of the distances"
summary(dist_man)
data('Boston')
boston_scaled <- scale(Boston)
# euclidean distance matrix
dist_eu <- dist(Boston)
print("Euclidean distance")
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(boston_scaled, method = "manhattan")
print("Manhattan distance")
# look at the summary of the distances"
summary(dist_man)
# euclidean distance matrix
dist_eu <- dist(Boston)
print("Euclidean distance")
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(boston_scaled, method = "manhattan")
print("\nManhattan distance")
# look at the summary of the distances"
summary(dist_man)
?pairs
?kmeans
km <-kmeans(Boston, centers = 3)
pairs(Boston, col = km$cluster)
km <-kmeans(Boston, centers = 3)
#pairs(Boston, col = km$cluster)
ggpairs(Boston, mapping = aes(col = km$cluster, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
km$cluster
km <-kmeans(Boston, centers = 3)
km$clusterc <- as.factor(km$cluster)
#pairs(Boston, col = km$cluster)
ggpairs(Boston, mapping = aes(col = km$clusterc, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
km <-kmeans(Boston, centers = 3)
km$clusterc <- as.factor(km$cluster)
#pairs(Boston, col = km$cluster)
ggpairs(Boston, mapping = aes(col = km$clusterc, alpha = 0.3))
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# K-means clustering based on above
km <-kmeans(Boston, centers = 3)
pairs(Boston, col = km$cluster)
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
pairs(Boston, col = km$cluster)
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
ggpairs(dt, mapping = aes(col = km$cluster, alpha = 0.3))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
ggpairs(Boston, mapping = aes(col = km$cluster, alpha = 0.3))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
km$COR <- as.factor(km$cluster)
ggpairs(Boston, mapping = aes(col = km$COR, alpha = 0.3))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
km$COR <- as.factor(km$cluster)
ggpairs(data=tips, title="tips data", mapping=ggplot2::aes(colour = km$cluster), lower=list(combo=wrap("facethist",binwidth=1)))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
km$COR <- as.factor(km$cluster)
ggpairs(data=Boston, title="tips data", mapping=ggplot2::aes(colour = km$cluster), lower=list(combo=wrap("facethist",binwidth=1)))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
km$COR <- as.factor(km$cluster)
ggpairs(data=Boston, title="tips data", mapping=ggplot2::aes(colour = km$COR), lower=list(combo=wrap("facethist",binwidth=1)))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
km$COR <- as.factor(km$cluster)
ggpairs(data=Boston[6,11], title="Two clusters", mapping=ggplot2::aes(colour = km$COR), lower=list(combo=wrap("facethist",binwidth=1)))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
pairs(Boston[6,10], col = km$cluster)
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston[6:10], col = km$cluster)
km$COR <- as.factor(km$cluster)
ggpairs(data=Boston[6:11], title="Two clusters", mapping=ggplot2::aes(colour = km$COR), lower=list(combo=wrap("facethist",binwidth=1)))
library(plotly)
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers')
?plot_ly
library(plotly)
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', color = train$crime, mode='markers')
setwd("C:/Users/Ylva/Documents/GitHub/IODS-project")
library(dplyr)
library(stringr)
human <- read.table("data/human.txt")
human_std <- scale(human)
human_pca_std <- prcomp(human_std) # Do PCA for the standardized data
s <- summary(human_pca_std)
summary(human_pca_std)
human_pca <- prcomp(human[-1])
summary(human_pca)
human <- read.table("data/human.txt")
human_std <- scale(human)
human_pca_std <- prcomp(human_std) # Do PCA for the standardized data
s <- summary(human_pca_std)
summary(human_pca_std)
setwd("C:/Users/Ylva/Documents/GitHub/IODS-project")
library(dplyr)
rats <- read.table("data/rats.txt", sep = "\t")
bprs <- read.table("data/bprs.txt", sep = "\t")
setwd("C:/Users/Ylva/Documents/GitHub/IODS-project")
library(dplyr)
library(tidyr)
library(ggplot2)
rats <- read.table("data/rats.txt", sep = "\t")
bprs <- read.table("data/bprs.txt", sep = "\t")
p1 <- ggplot(RATS, aes(x = WD, y = weight, linetype = subject))
p1 <- ggplot(rats, aes(x = WD, y = weight, linetype = subject))
p2 <- p1 + geom_line() + scale_linetype_manual(values = rep(1:10, times=4))
p3 <- p2 + facet_grid(. ~ treatment, labeller = label_both)
p4 <- p3 + theme_bw() + theme(legend.position = "none")
p5 <- p4 + theme(panel.grid.minor.y = element_blank())
p6 <- p5 + scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
p1 <- ggplot(rats, aes(x = WD, y = weight, linetype = subject))
p1
p1 <- ggplot(rats, aes(x = WD, y = Weight, linetype = subject))
p1
p1 <- ggplot(rats, aes(x = WD, y = Weight, linetype = ID))
p1
BPRS$treatment <- factor(BPRS$treatment)
setwd("C:/Users/Ylva/Documents/GitHub/IODS-project")
library(dplyr)
library(tidyr)
library(ggplot2)
RATS <- read.table("data/rats.txt", sep = "\t")
BPRS <- read.table("data/bprs.txt", sep = "\t")
#Included this because for some reason these were returned as int
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
RATS$Group <- factor(RATS$Group)
RATS$ID <- factor(RATS$ID)
p1 <- ggplot(rats, aes(x = WD, y = Weight, linetype = ID))
p1 <- ggplot(RATS, aes(x = WD, y = Weight, linetype = ID))
p1
p1 <- ggplot(RATS, aes(x = WD, y = Weight, linetype = ID))
p2 <- p1 + geom_line() + scale_linetype_manual(values = rep(1:10, times=4))
p2
p1 <- ggplot(RATS, aes(x = WD, y = Weight, linetype = ID))
p2 <- p1 + geom_line() + scale_linetype_manual(values = rep(1:10, times=4))
p3 <- p2 + facet_grid(. ~ group, labeller = label_both)
p4 <- p3 + theme_bw() + theme(legend.position = "none")
p5 <- p4 + theme(panel.grid.minor.y = element_blank())
p5
p4
p1 <- ggplot(RATS, aes(x = WD, y = Weight, linetype = ID))
p2 <- p1 + geom_line() + scale_linetype_manual(values = rep(1:10, times=4))
p3 <- p2 + facet_grid(. ~ group, labeller = label_both)
p4 <- p3 + theme_bw() + theme(legend.position = "none")
p5 <- p4 + theme(panel.grid.minor.y = element_blank())
p6 <- p5 + scale_y_continuous(limits = c(min(RATS$Weight), max(RATS$Weight)))
p6
p1 <- ggplot(RATS, aes(x = Time, y = Weight, linetype = ID))
p2 <- p1 + geom_line() + scale_linetype_manual(values = rep(1:10, times=4))
p3 <- p2 + facet_grid(. ~ group, labeller = label_both)
p4 <- p3 + theme_bw() + theme(legend.position = "none")
p5 <- p4 + theme(panel.grid.minor.y = element_blank())
p6 <- p5 + scale_y_continuous(limits = c(min(RATS$Weight), max(RATS$Weight)))
p6
p5
p1 <- ggplot(RATS, aes(x = Time, y = Weight, linetype = ID))
p2 <- p1 + geom_line() + scale_linetype_manual(values = rep(1:10, times=4))
p3 <- p2 + facet_grid(. ~ Group, labeller = label_both)
p4 <- p3 + theme_bw() + theme(legend.position = "none")
p5 <- p4 + theme(panel.grid.minor.y = element_blank())
p6 <- p5 + scale_y_continuous(limits = c(min(RATS$Weight), max(RATS$Weight)))
p6
p1 <- ggplot(RATS, aes(x = Time, y = Weight, linetype = ID))
p2 <- p1 + geom_line() + scale_linetype_manual(values = rep(1:10, times=4))
p3 <- p2 + facet_grid(. ~ Group, labeller = label_both)
p4 <- p3 + theme(legend.position = "none")
p5 <- p4 + theme(panel.grid.minor.y = element_blank())
p6 <- p5 + scale_y_continuous(limits = c(min(RATS$Weight), max(RATS$Weight)))
p6
dim(RATS)
str(RATS)
RATSL <- RATSL %>%
group_by(Time) %>%
mutate( stdweight = (Weight - mean(Weight))/sd(Weight) ) %>%
ungroup()
setwd("C:/Users/Ylva/Documents/GitHub/IODS-project")
library(dplyr)
library(tidyr)
library(ggplot2)
RATS <- read.table("data/rats.txt", sep = "\t")
BPRS <- read.table("data/bprs.txt", sep = "\t")
#Included this because for some reason these were returned as int
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
RATS$Group <- factor(RATS$Group)
RATS$ID <- factor(RATS$ID)
library(dplyr)
library(tidyr)
setwd("C:/Users/Ylva/Documents/GitHub/IODS-project")
# 1. Import data
BPRS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", sep  =" ", header = T)
RATS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", sep  ="\t", header = T)
str(BPRS)
str(RATS)
summary(BPRS)
summary(RATS)
# Data is in wide form: one row represents one week, columns represents individual observations.
# This allows for examining e.g. the mean and max for a week, but not the tracking of an individual.
#2. Change categorical variables to factors
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
RATS$Group <- factor(RATS$Group)
RATS$ID <- factor(RATS$ID)
# 3. Convert data from wide to long form
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(BPRSL$weeks, 5, 5)))
RATSL <- RATS %>%
gather(key = WD, value = Weight, -ID, -Group) %>%
mutate(Time = as.integer(substr(WD,3,4)))
# 4. Look at new data
glimpse(BPRSL)
head(BPRSL)
summary(BPRSL)
glimpse(RATSL)
head(RATSL)
summary(RATSL)
write.table(RATSL, file = "data/rats.txt", sep = "\t")
write.table(BPRSL, file = "data/bprs.txt", sep = "\t")
p1 <- ggplot(RATS, aes(x = Time, y = Weight, linetype = ID))
p2 <- p1 + geom_line() + scale_linetype_manual(values = rep(1:10, times=4))
p3 <- p2 + facet_grid(. ~ Group, labeller = label_both)
p4 <- p3 + theme(legend.position = "none")
p5 <- p4 + theme(panel.grid.minor.y = element_blank())
p6 <- p5 + scale_y_continuous(limits = c(min(RATS$Weight), max(RATS$Weight)))
p6
setwd("C:/Users/Ylva/Documents/GitHub/IODS-project")
library(dplyr)
library(tidyr)
library(ggplot2)
RATS <- read.table("data/rats.txt", sep = "\t")
BPRS <- read.table("data/bprs.txt", sep = "\t")
#Included this because for some reason these were returned as int
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
RATS$Group <- factor(RATS$Group)
RATS$ID <- factor(RATS$ID)
setwd("C:/Users/Ylva/Documents/GitHub/IODS-project")
library(dplyr)
library(tidyr)
library(ggplot2)
RATS <- read.table("data/rats.txt", sep = "\t")
BPRS <- read.table("data/bprs.txt", sep = "\t")
#Included this because for some reason these were returned as int
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
RATS$Group <- factor(RATS$Group)
RATS$ID <- factor(RATS$ID)
str(RATS)
p1 <- ggplot(RATS, aes(x = Time, y = Weight, linetype = ID))
p2 <- p1 + geom_line() + scale_linetype_manual(values = rep(1:10, times=4))
p3 <- p2 + facet_grid(. ~ Group, labeller = label_both)
p4 <- p3 + theme(legend.position = "none")
p5 <- p4 + theme(panel.grid.minor.y = element_blank())
p6 <- p5 + scale_y_continuous(limits = c(min(RATS$Weight), max(RATS$Weight)))
p6
RATSL <- RATSL %>%
group_by(Time) %>%
mutate( stdweight = (Weight - mean(Weight))/sd(Weight) ) %>%
ungroup()
setwd("C:/Users/Ylva/Documents/GitHub/IODS-project")
library(dplyr)
library(tidyr)
library(ggplot2)
RATS <- read.table("data/rats.txt", sep = "\t")
BPRS <- read.table("data/bprs.txt", sep = "\t")
#Included this because for some reason these were returned as int
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
RATS$Group <- factor(RATS$Group)
RATS$ID <- factor(RATS$ID)
RATSL <- RATS %>%
group_by(Time) %>%
mutate( stdweight = (Weight - mean(Weight))/sd(Weight) ) %>%
ungroup()
glimpse(RATSL)
# Standardise the scores:
RATSL <- RATS %>%
group_by(Time) %>%
mutate( stdweight = (Weight - mean(Weight))/sd(Weight) ) %>%
ungroup()
p1 <- ggplot(RATSL, aes(x = Time, y = stdweight, linetype = ID)) +
geom_line() + scale_linetype_manual(values = rep(1:10, times=4))+
facet_grid(. ~ treatment, labeller = label_both)+
theme_bw() + theme(legend.position = "none")+
theme(panel.grid.minor.y = element_blank())+
scale_y_continuous(name = "standardized weight") +
ggtitle("Standardised weights over time")
p2
# Standardise the scores:
RATSL <- RATS %>%
group_by(Time) %>%
mutate( stdweight = (Weight - mean(Weight))/sd(Weight) ) %>%
ungroup()
p1 <- ggplot(RATSL, aes(x = Time, y = stdweight, linetype = ID)) +
geom_line() + scale_linetype_manual(values = rep(1:10, times=4))+
facet_grid(. ~ Group, labeller = label_both)+
theme_bw() + theme(legend.position = "none")+
theme(panel.grid.minor.y = element_blank())+
scale_y_continuous(name = "standardized weight") +
ggtitle("Standardised weights over time")
p2
# Standardise the scores:
RATSL <- RATS %>%
group_by(Time) %>%
mutate( stdweight = (Weight - mean(Weight))/sd(Weight) ) %>%
ungroup()
p1 <- ggplot(RATSL, aes(x = Time, y = stdweight, linetype = ID)) +
geom_line() + scale_linetype_manual(values = rep(1:10, times=4))+
facet_grid(. ~ Group, labeller = label_both)+
theme_bw() + theme(legend.position = "none")+
theme(panel.grid.minor.y = element_blank())+
scale_y_continuous(name = "standardized weight") +
ggtitle("Standardised weights over time")
p1
head(BPRS)
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = subject))
p2 <- p1 + geom_line(aes(linetype = treatment))
p3 <- p2 + scale_x_continuous(name = "Week no.", breaks = seq(0, 60, 10))
p4 <- p3 + scale_y_continuous(name = "BPRS")
p5 <- p4 + theme_bw() + theme(legend.position = "top")
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
p3
?geom_line
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = subject))
p2 <- p1 + geom_line(aes(color = treatment))
p3 <- p2 + scale_x_continuous(name = "Week no.", breaks = seq(0, 60, 10))
p4 <- p3 + scale_y_continuous(name = "BPRS")
p5 <- p4 + theme_bw() + theme(legend.position = "top")
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = subject))
p2 <- p1 + geom_line(aes(color = treatment))
p3 <- p2 + scale_x_continuous(name = "Week no.")
p4 <- p3 + scale_y_continuous(name = "BPRS")
p5 <- p4 + theme_bw() + theme(legend.position = "top")
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(color = treatment))+
scale_x_continuous(name = "Week no.") +
scale_y_continuous(name = "BPRS")+
theme_bw() + theme(legend.position = "top")
#+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p1
p1 <- ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(color = treatment))+
scale_x_continuous(name = "Week no.") +
scale_y_continuous(name = "BPRS")+
theme_bw() + theme(legend.position = "top")
#+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p1
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(color = treatment))+
geom_point() +
scale_x_continuous(name = "Week no.") +
scale_y_continuous(name = "BPRS")+
theme_bw() + theme(legend.position = "top")
#+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p1
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = subject)) +
#geom_line(aes(color = treatment))+
#scale_x_continuous(name = "Week no.") +
#scale_y_continuous(name = "BPRS")+
theme_bw() + theme(legend.position = "top")
#+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p1
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(color = treatment))+
#scale_x_continuous(name = "Week no.") +
#scale_y_continuous(name = "BPRS")+
theme_bw() + theme(legend.position = "top")
#+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p1
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = subject)) +
geom_line()+
#scale_x_continuous(name = "Week no.") +
#scale_y_continuous(name = "BPRS")+
theme_bw() + theme(legend.position = "top")
#+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p1
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = treatment)) +
geom_line()+
#scale_x_continuous(name = "Week no.") +
#scale_y_continuous(name = "BPRS")+
theme_bw() + theme(legend.position = "top")
#+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p1
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = treatment)) +
geom_line()+
#scale_x_continuous(name = "Week no.") +
#scale_y_continuous(name = "BPRS")+
theme_bw() + theme(legend.position = "top")
#+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p1
p1
p1 <- ggplot(BPRS, aes(x = Time, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10))
p4 <- p3 + scale_y_continuous(name = "Weight (grams)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10))
p4 <- p3 + scale_y_continuous(name = "Weight (grams)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = subject)) +
geom_line()+
#scale_x_continuous(name = "Week no.") +
#scale_y_continuous(name = "BPRS")+
theme_bw() + theme(legend.position = "top")
#+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p1
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = ID)) +
geom_line(aes(linetype = Group))+
#scale_x_continuous(name = "Week no.") +
#scale_y_continuous(name = "BPRS")+
theme_bw() + theme(legend.position = "top")
#+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p1
p1 <- ggplot(BPRS, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(linetype = treatment))+
#scale_x_continuous(name = "Week no.") +
#scale_y_continuous(name = "BPRS")+
theme_bw() + theme(legend.position = "top")
#+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p1
