install.packages(c("twitteR", "devtools", "rjson", "bit64", "httr"))
library(devtools)
install_github("geoffjentry/twitteR")
library(MASS)
library(ggplot2)
library(GGally)
library(tidyverse)
library(corrplot)
data(Boston)
summary(Boston)
cor_matrix<-cor(Boston) %>% corrplot(method="circle", type = "upper", tl.pos = "d", tl.cex = 0.8)
boston_scaled <- scale(Boston)
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled)
#create quantiles for crim
bins <- quantile(boston_scaled$crim)
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# add the new categorical value to scaled data
boston_scaled <- data.frame(boston_scaled, crime)
table(boston_scaled$crime)
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
summary(test)
lda.fit <- lda(crime ~., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
# cross tabulate the results
table(correct = correct_classes, predicted = lda.pred$class)
data('Boston')
boston_scaled <- scale(Boston)
# euclidean distance matrix
dist_eu <- dist(Boston)
print("Euclidean distance")
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(boston_scaled, method = "manhattan")
print("Manhattan distance")
# look at the summary of the distances"
summary(dist_man)
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston[6:10], col = km$cluster)
km$COR <- as.factor(km$cluster)
ggpairs(data=Boston[6:11], title="Two clusters", mapping=ggplot2::aes(colour = km$COR), lower=list(combo=wrap("facethist",binwidth=1)))
library(plotly)
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', color = train$crime, mode='markers')
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', color = km$cluster, mode='markers')
library(plotly)
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', color = train$crime, mode='markers')
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', color = km$cluster, mode='markers')
?plot_ly
#Creating km only for train, since using km for all of Boston produces error (Error: Columns `x`, `y`, `z` must be length 1 or 506, not 404, 404, 404). I assume this is because km$cluster contains all of Boston and is too long.
kmB <- kmeans(train, centers = 2)
#Creating km only for train, since using km for all of Boston produces error (Error: Columns `x`, `y`, `z` must be length 1 or 506, not 404, 404, 404). I assume this is because km$cluster contains all of Boston and is too long.
kmB <- kmeans(train, centers = 2)
#Creating km only for train, since using km for all of Boston produces error (Error: Columns `x`, `y`, `z` must be length 1 or 506, not 404, 404, 404). I assume this is because km$cluster contains all of Boston and is too long.
kmB <- kmeans(train, centers = 2)
#Creating km only for train, since using km for all of Boston produces error (Error: Columns `x`, `y`, `z` must be length 1 or 506, not 404, 404, 404). I assume this is because km$cluster contains all of Boston and is too long.
kmB <- kmeans(train[1:13], centers = 2)
#Making numeric value into factors
kmB$COR <- as.factor(km$cluster)
#Same code as above
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', color = kmB$COR, mode='markers')
#Creating km only for train, since using km for all of Boston produces error (Error: Columns `x`, `y`, `z` must be length 1 or 506, not 404, 404, 404). I assume this is because km$cluster contains all of Boston and is too long.
kmB <- kmeans(train[1:13], centers = 2)
#Making numeric value into factors
kmB$COR <- as.factor(km$cluster)
#Same code as above
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', color = kmB$COR, mode='markers')
#Creating km only for train, since using km for all of Boston produces error (Error: Columns `x`, `y`, `z` must be length 1 or 506, not 404, 404, 404). I assume this is because km$cluster contains all of Boston and is too long.
kmB <- kmeans(train[1:13], centers = 2)
#Making numeric value into factors
kmB$COR <- as.factor(km$cluster)
#Same code as above
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', color = km$COR, mode='markers')
#Creating km only for train, since using km for all of Boston produces error (Error: Columns `x`, `y`, `z` must be length 1 or 506, not 404, 404, 404). I assume this is because km$cluster contains all of Boston and is too long.
kmB <- kmeans(train[1:13], centers = 2)
#Making numeric value into factors
kmB$COR <- as.factor(km$cluster)
#Same code as above
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', color = km$COR, mode='markers')
kmB <- kmeans(train[1:13], centers = 2)
kmB$COR <- as.factor(km$cluster)
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', color = kmB$COR, mode='markers')
#Creating km only for train, since using km for all of Boston produces error (Error: Columns `x`, `y`, `z` must be length 1 or 506, not 404, 404, 404). I assume this is because km$cluster contains all of Boston and is too long.
kmB <- kmeans(train[1:13], centers = 2)
#Making numeric value into factors
kmB$COR <- as.factor(km$cluster)
#Same code as above
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers')
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = kmB$COR)
kmB$COR <- as.factor(kmB$cluster)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = kmB$COR)
library(plotly)
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', color = train$crime, mode='markers')
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# Exploring the data
str(hd)
dim(hd)
str(gii)
dim(gii)
colnames(hd) <- c("hdi_rank", "country", "hdi", "lifexp", "exped", "yrsed", "gni_cap", "gni_hdi")
colnames(gii) <- c("gii_rank", "country", "gii", "matmor", "adbirth", "parlperc", "secedF", "secedM", "laborF", "laborM")
?mutate
gii$eduratio <- mutate(gii, eduratio = gii$secedF / gii$secedM)
gii$eduratio <- mutate(gii, eduratio = secedF / secedM)
str(gii)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# 3. Exploring the data
str(hd)
dim(hd)
str(gii)
dim(gii)
# hd = 195 obs, 8 var
# gii = 195 obs, 10 var
# 4. Renaming variables
colnames(hd) <- c("hdi_rank", "country", "hdi", "lifexp", "exped", "yrsed", "gni_cap", "gni_hdi")
colnames(gii) <- c("gii_rank", "country", "gii", "matmor", "adbirth", "parlperc", "secedF", "secedM", "laborF", "laborM")
eduratio <- mutate(gii, eduratio = secedF / secedM)
str(gii)
library(dplyr)
# 2. Reading data
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# 3. Exploring the data
str(hd)
dim(hd)
str(gii)
dim(gii)
# hd = 195 obs, 8 var
# gii = 195 obs, 10 var
# 4. Renaming variables
colnames(hd) <- c("hdi_rank", "country", "hdi", "lifexp", "exped", "yrsed", "gni_cap", "gni_hdi")
colnames(gii) <- c("gii_rank", "country", "gii", "matmor", "adbirth", "parlperc", "secedF", "secedM", "laborF", "laborM")
eduratio <- mutate(gii, eduratio = secedF / secedM)
str(gii)
# 2. Reading data
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# 3. Exploring the data
str(hd)
dim(hd)
str(gii)
dim(gii)
# hd = 195 obs, 8 var
# gii = 195 obs, 10 var
# 4. Renaming variables
colnames(hd) <- c("hdi_rank", "country", "hdi", "lifexp", "exped", "yrsed", "gni_cap", "gni_hdi")
colnames(gii) <- c("gii_rank", "country", "gii", "matmor", "adbirth", "parlperc", "secedF", "secedM", "laborF", "laborM")
# 5. Mutate data
gii <- mutate(gii, eduratio = secedF / secedM)
str(gii)
gii <- mutate(gii, eduratio = laborF / laborM)
# checking everything is ok
str(gii)
gii <- mutate(gii, eduratio = secedF / secedM)
# ratio of labour force participation of females and males in each country
gii <- mutate(gii, labratio = laborF / laborM)
# checking everything is ok
str(gii)
?inner_join
human <- inner_join(hd, gii, by = "country", suffix = c(".hd", ".gii"))
str(human)
write.table(human, file = "data/human.txt", sep = "\t")
# 1. Creatopm & setting up
setwd("C:/Users/Ylva/Documents/GitHub/IODS-project")
# saving into data folder
write.table(human, file = "data/human.txt", sep = "\t")
dt <- read.table("data/human.txt")
