library(Boston)
install.packages("Boston")
library(Boston)
install.packages("MASS")
library(MASS)
data(Boston)
summary(Boston)
pairs(Boston)
library(MASS)
library(ggplot2)
data(Boston)
ggpairs(Boston)
ggpairs(Boston, mapping = aes(col = chas, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
library(MASS)
library(ggplot2)
data(Boston)
ggpairs(Boston, mapping = aes(col = chas, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
?ggpairs
??ggpairs
library(MASS)
library(ggplot2)
library(GGally)
data(Boston)
ggpairs(Boston, mapping = aes(col = chas, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
ggpairs(Boston, mapping = aes(alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
install.packages("corrplot")
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
library(MASS)
library(ggplot2)
library(GGally)
library(tidyverse)
library(corrplot)
data(Boston)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
cor_matrix<-cor(Boston) %>% corrplot(method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
cor_matrix<-cor(Boston) %>% corrplot(method="circle", type = "upper", cl.pos = "a", tl.pos = "d", tl.cex = 0.6)
cor_matrix<-cor(Boston) %>% corrplot(method="circle", type = "upper", cl.pos = "b", tl.pos = "c", tl.cex = 0.6)
cor_matrix<-cor(Boston) %>% corrplot(method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
cor_matrix<-cor(Boston) %>% corrplot(method="circle", type = "upper", tl.pos = "d", tl.cex = 0.6)
cor_matrix<-cor(Boston) %>% corrplot(method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
cor_matrix<-cor(Boston) %>% corrplot(method="circle", type = "upper", tl.pos = "d", tl.cex = 0.8)
?scale
boston_scaled <- scale(Boston)
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled)
?quantile
?cut
#create quantiles for crim
bins <- quantile(boston_scaled$crim)
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# add the new categorical value to scaled data
boston_scaled <- data.frame(boston_scaled, crime)
table(boston_scaled$crime)
?sample
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
summary(test)
crimelda <- lda(crime ~, data = train)
crimelda <- lda(crime ~ data = train)
lda()
?lda
crimelda <- lda(crime ~., data = train)
summary(crimelda)
crimelda <- lda(crime ~., data = train)
crimelda
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(crimelda, dimen = 2)
lda.arrows(crimelda, myscale = 2)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.fit <- lda(crime ~., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
str(test)
# predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
# cross tabulate the results
table(correct = correct_classes, predicted = lda.pred$class)
str(test)
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
summary(test)
4 + 9 + 9 + 5 + 2 + 1
str(test)
30/102
data(Boston)
summary(Boston)
?data()
data(Boston)
summary(Boston)
data('Boston')
scale('Boston')
data('Boston')
scale(Boston)
data('Boston')
scale(Boston)
# euclidean distance matrix
dist_eu <- dist(Boston)
print("Euclidean distance")
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(Boston, method = "manhattan")
print("Manhattan distance")
# look at the summary of the distances"
summary(dist_man)
# euclidean distance matrix
dist_eu <- dist(Boston)
print("Euclidean distance")
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(boston_scaled, method = "manhattan")
print("Manhattan distance")
# look at the summary of the distances"
summary(dist_man)
data('Boston')
boston_scaled <- scale(Boston)
# euclidean distance matrix
dist_eu <- dist(Boston)
print("Euclidean distance")
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(boston_scaled, method = "manhattan")
print("Manhattan distance")
# look at the summary of the distances"
summary(dist_man)
# euclidean distance matrix
dist_eu <- dist(Boston)
print("Euclidean distance")
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(boston_scaled, method = "manhattan")
print("\nManhattan distance")
# look at the summary of the distances"
summary(dist_man)
?pairs
?kmeans
km <-kmeans(Boston, centers = 3)
pairs(Boston, col = km$cluster)
km <-kmeans(Boston, centers = 3)
#pairs(Boston, col = km$cluster)
ggpairs(Boston, mapping = aes(col = km$cluster, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
km$cluster
km <-kmeans(Boston, centers = 3)
km$clusterc <- as.factor(km$cluster)
#pairs(Boston, col = km$cluster)
ggpairs(Boston, mapping = aes(col = km$clusterc, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
km <-kmeans(Boston, centers = 3)
km$clusterc <- as.factor(km$cluster)
#pairs(Boston, col = km$cluster)
ggpairs(Boston, mapping = aes(col = km$clusterc, alpha = 0.3))
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# K-means clustering based on above
km <-kmeans(Boston, centers = 3)
pairs(Boston, col = km$cluster)
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
pairs(Boston, col = km$cluster)
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
ggpairs(dt, mapping = aes(col = km$cluster, alpha = 0.3))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
ggpairs(Boston, mapping = aes(col = km$cluster, alpha = 0.3))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
km$COR <- as.factor(km$cluster)
ggpairs(Boston, mapping = aes(col = km$COR, alpha = 0.3))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
km$COR <- as.factor(km$cluster)
ggpairs(data=tips, title="tips data", mapping=ggplot2::aes(colour = km$cluster), lower=list(combo=wrap("facethist",binwidth=1)))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
km$COR <- as.factor(km$cluster)
ggpairs(data=Boston, title="tips data", mapping=ggplot2::aes(colour = km$cluster), lower=list(combo=wrap("facethist",binwidth=1)))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
km$COR <- as.factor(km$cluster)
ggpairs(data=Boston, title="tips data", mapping=ggplot2::aes(colour = km$COR), lower=list(combo=wrap("facethist",binwidth=1)))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston, col = km$cluster)
km$COR <- as.factor(km$cluster)
ggpairs(data=Boston[6,11], title="Two clusters", mapping=ggplot2::aes(colour = km$COR), lower=list(combo=wrap("facethist",binwidth=1)))
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
pairs(Boston[6,10], col = km$cluster)
#K-means clustering based on av
km <-kmeans(Boston, centers = 2)
#pairs(Boston[6:10], col = km$cluster)
km$COR <- as.factor(km$cluster)
ggpairs(data=Boston[6:11], title="Two clusters", mapping=ggplot2::aes(colour = km$COR), lower=list(combo=wrap("facethist",binwidth=1)))
library(plotly)
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers')
?plot_ly
library(plotly)
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', color = train$crime, mode='markers')
